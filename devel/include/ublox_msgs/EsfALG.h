// Generated by gencpp from file ublox_msgs/EsfALG.msg
// DO NOT EDIT!


#ifndef UBLOX_MSGS_MESSAGE_ESFALG_H
#define UBLOX_MSGS_MESSAGE_ESFALG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ublox_msgs
{
template <class ContainerAllocator>
struct EsfALG_
{
  typedef EsfALG_<ContainerAllocator> Type;

  EsfALG_()
    : iTOW(0)
    , version(0)
    , flags(0)
    , errors(0)
    , reserved0(0)
    , yaw(0)
    , pitch(0)
    , roll(0)  {
    }
  EsfALG_(const ContainerAllocator& _alloc)
    : iTOW(0)
    , version(0)
    , flags(0)
    , errors(0)
    , reserved0(0)
    , yaw(0)
    , pitch(0)
    , roll(0)  {
  (void)_alloc;
    }



   typedef uint32_t _iTOW_type;
  _iTOW_type iTOW;

   typedef uint8_t _version_type;
  _version_type version;

   typedef uint8_t _flags_type;
  _flags_type flags;

   typedef uint8_t _errors_type;
  _errors_type errors;

   typedef uint8_t _reserved0_type;
  _reserved0_type reserved0;

   typedef uint32_t _yaw_type;
  _yaw_type yaw;

   typedef int16_t _pitch_type;
  _pitch_type pitch;

   typedef int16_t _roll_type;
  _roll_type roll;



  enum {
    CLASS_ID = 16u,
    MESSAGE_ID = 20u,
    FLAGS_AUTO_MNT_ALG_ON = 0u,
    FLAGS_STATUS = 14u,
    FLAGS_STATUS_USER_FIXED_ANGLES_USED = 0u,
    FLAGS_STATUS_ROLL_PITCH_ANGLES_ALIGNEMENT_ONGOING = 1u,
    FLAGS_STATUS_ROLL_PITCH_YAW_ANGLES_ALIGNEMENT_ONGOING = 2u,
    FLAGS_STATUS_COARSE_ALIGNMENT_USED = 3u,
    FLAGS_STATUS_FINE_ALIGNEMENT_USED = 4u,
    ERROR_TILT_ARG_ERROR = 1u,
    ERROR_YAW_ARG_ERROR = 2u,
    ERROR_ANGLE_ERROR = 3u,
  };


  typedef boost::shared_ptr< ::ublox_msgs::EsfALG_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox_msgs::EsfALG_<ContainerAllocator> const> ConstPtr;

}; // struct EsfALG_

typedef ::ublox_msgs::EsfALG_<std::allocator<void> > EsfALG;

typedef boost::shared_ptr< ::ublox_msgs::EsfALG > EsfALGPtr;
typedef boost::shared_ptr< ::ublox_msgs::EsfALG const> EsfALGConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ublox_msgs::EsfALG_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ublox_msgs::EsfALG_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ublox_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ublox_msgs': ['/home/joe/octagon/src/ublox/ublox_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::EsfALG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ublox_msgs::EsfALG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::EsfALG_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ublox_msgs::EsfALG_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::EsfALG_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ublox_msgs::EsfALG_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ublox_msgs::EsfALG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9a16c82ca78b0658bd506bfde3a1b262";
  }

  static const char* value(const ::ublox_msgs::EsfALG_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9a16c82ca78b0658ULL;
  static const uint64_t static_value2 = 0xbd506bfde3a1b262ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox_msgs::EsfALG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ublox_msgs/EsfALG";
  }

  static const char* value(const ::ublox_msgs::EsfALG_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ublox_msgs::EsfALG_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ESF-ALG (0x10 0x14)\n\
# IMU alignment information\n\
#\n\
# This message outputs the IMU alignment angles which define the rotation from the installation-frame to the\n\
# IMU-frame. In addition, it indicates the automatic IMU-mount alignment status.\n\
#\n\
\n\
uint8 CLASS_ID = 16\n\
uint8 MESSAGE_ID = 20\n\
\n\
uint8 FLAGS_AUTO_MNT_ALG_ON = 0\n\
uint32 FLAGS_STATUS = 14\n\
\n\
uint8 FLAGS_STATUS_USER_FIXED_ANGLES_USED = 0\n\
uint8 FLAGS_STATUS_ROLL_PITCH_ANGLES_ALIGNEMENT_ONGOING = 1\n\
uint8 FLAGS_STATUS_ROLL_PITCH_YAW_ANGLES_ALIGNEMENT_ONGOING = 2\n\
uint8 FLAGS_STATUS_COARSE_ALIGNMENT_USED = 3\n\
uint8 FLAGS_STATUS_FINE_ALIGNEMENT_USED = 4\n\
\n\
uint8 ERROR_TILT_ARG_ERROR = 1\n\
uint8 ERROR_YAW_ARG_ERROR = 2\n\
uint8 ERROR_ANGLE_ERROR = 3\n\
\n\
uint32 iTOW\n\
uint8 version\n\
uint8 flags\n\
uint8 errors\n\
uint8 reserved0\n\
uint32 yaw # IMU-mount yaw angle [0, 360]\n\
int16 pitch # IMU-mount pitch angle [-90, 90]\n\
int16 roll # IMU-mount roll angle [-180, 180]\n\
";
  }

  static const char* value(const ::ublox_msgs::EsfALG_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ublox_msgs::EsfALG_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.iTOW);
      stream.next(m.version);
      stream.next(m.flags);
      stream.next(m.errors);
      stream.next(m.reserved0);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsfALG_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox_msgs::EsfALG_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ublox_msgs::EsfALG_<ContainerAllocator>& v)
  {
    s << indent << "iTOW: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.iTOW);
    s << indent << "version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.version);
    s << indent << "flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flags);
    s << indent << "errors: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.errors);
    s << indent << "reserved0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reserved0);
    s << indent << "yaw: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int16_t>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UBLOX_MSGS_MESSAGE_ESFALG_H
